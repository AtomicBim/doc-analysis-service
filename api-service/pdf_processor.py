"""
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π PDF –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
–£–±–∏—Ä–∞–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF –∏ —É–ª—É—á—à–∞–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å.
"""

import asyncio
import logging
from typing import List, Dict, Any, Tuple, Optional
import fitz  # pymupdf
from PIL import Image
import io
import base64

logger = logging.getLogger(__name__)


class PDFProcessor:
    """
    –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF —Ñ–∞–π–ª–∞–º–∏.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å—Ç—Ä–∞–Ω–∏—Ü.
    """

    def __init__(self, doc_content: bytes, filename: str):
        self.doc_content = doc_content
        self.filename = filename
        self._doc = None

    def __enter__(self):
        """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è PDF"""
        self._doc = fitz.open(stream=self.doc_content, filetype="pdf")
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        """Context manager –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è PDF"""
        if self._doc:
            self._doc.close()

    @property
    def page_count(self) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ"""
        if not self._doc:
            raise RuntimeError("PDF –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ 'with'")
        return len(self._doc)

    def get_page(self, page_num: int) -> fitz.Page:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ –Ω–æ–º–µ—Ä—É (1-based)"""
        if not self._doc:
            raise RuntimeError("PDF –Ω–µ –æ—Ç–∫—Ä—ã—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ 'with'")
        if page_num < 1 or page_num > self.page_count:
            raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {page_num}")
        return self._doc[page_num - 1]

    def extract_pages_as_images(
        self,
        page_numbers: List[int],
        dpi: int = 100,
        quality: int = 70,
        detail: str = "low"
    ) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ base64-encoded –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            page_numbers: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü (1-based)
            dpi: –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            quality: JPEG –∫–∞—á–µ—Å—Ç–≤–æ (0-100)
            detail: OpenAI Vision detail level

        Returns:
            –°–ø–∏—Å–æ–∫ base64 —Å—Ç—Ä–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        images = []
        logger.info(f"üìÑ [PDF] –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ {len(page_numbers)} —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ {self.filename} (dpi={dpi}, quality={quality})")

        for page_num in page_numbers:
            try:
                page = self.get_page(page_num)
                pix = page.get_pixmap(dpi=dpi)

                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ PIL Image
                img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ JPEG
                img_byte_arr = io.BytesIO()
                img.save(img_byte_arr, format='JPEG', quality=quality)
                base64_image = base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')

                images.append(base64_image)

            except Exception as e:
                logger.error(f"‚ùå [PDF] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")
                continue

        logger.info(f"‚úÖ [PDF] –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(images)}/{len(page_numbers)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        return images

    def extract_page_crops(
        self,
        page_num: int,
        crop_areas: List[Dict[str, float]],
        dpi: int = 100,
        quality: int = 70
    ) -> List[str]:
        """
        –ò–∑–≤–ª–µ—á—å –æ–±–ª–∞—Å—Ç–∏ (crops) —Å –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.

        Args:
            page_num: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (1-based)
            crop_areas: –°–ø–∏—Å–æ–∫ –æ–±–ª–∞—Å—Ç–µ–π –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è
            dpi: –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            quality: JPEG –∫–∞—á–µ—Å—Ç–≤–æ

        Returns:
            –°–ø–∏—Å–æ–∫ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –æ–±–ª–∞—Å—Ç–µ–π
        """
        crops = []
        try:
            page = self.get_page(page_num)
            pix = page.get_pixmap(dpi=dpi)
            img = Image.frombytes("RGB", [pix.width, pix.height], pix.samples)

            width, height = img.size

            for crop_config in crop_areas:
                # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã—Ä–µ–∑–∞–Ω–∏—è
                left = int(width * crop_config['left'])
                top = int(height * crop_config['top'])
                right = int(width * crop_config['right'])
                bottom = int(height * crop_config['bottom'])

                # –í—ã—Ä–µ–∑–∞–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏
                crop = img.crop((left, top, right, bottom))

                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫ base64
                img_byte_arr = io.BytesIO()
                crop.save(img_byte_arr, format='JPEG', quality=quality)
                base64_crop = base64.b64encode(img_byte_arr.getvalue()).decode('utf-8')
                crops.append(base64_crop)

        except Exception as e:
            logger.error(f"‚ùå [PDF] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è crops —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num}: {e}")

        return crops

    def extract_text_pages(self, max_pages: int = 200) -> List[str]:
        """–ë—ã—Å—Ç—Ä–æ –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–ª—è –ø—Ä–µ—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."""
        texts = []
        pages_to_process = min(self.page_count, max_pages)

        for i in range(pages_to_process):
            try:
                page = self._doc[i]
                page_text = page.get_text() or ""
                texts.append(page_text)
            except Exception as e:
                logger.error(f"‚ùå [PDF] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i+1}: {e}")
                texts.append("")

        return texts


class PDFBatchProcessor:
    """
    –ü–∞–∫–µ—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """

    def __init__(self, doc_content: bytes, filename: str):
        self.doc_content = doc_content
        self.filename = filename

    async def extract_pages_batch(
        self,
        page_numbers: List[int],
        dpi: int = 100,
        quality: int = 70,
        max_concurrent: int = 5
    ) -> List[str]:
        """
        –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.

        Args:
            page_numbers: –°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü (1-based)
            dpi: –ö–∞—á–µ—Å—Ç–≤–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            quality: JPEG –∫–∞—á–µ—Å—Ç–≤–æ
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á

        Returns:
            –°–ø–∏—Å–æ–∫ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–æ—Ä—è–¥–∫–µ page_numbers
        """
        async def extract_single_page(page_num: int) -> str:
            """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
            with PDFProcessor(self.doc_content, self.filename) as processor:
                images = processor.extract_pages_as_images([page_num], dpi, quality)
                return images[0] if images else ""

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–∞—Ç—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        results = []
        for i in range(0, len(page_numbers), max_concurrent):
            batch = page_numbers[i:i + max_concurrent]
            logger.info(f"üìÑ [BATCH] –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞—Ç—á–∞ {i//max_concurrent + 1}: —Å—Ç—Ä–∞–Ω–∏—Ü—ã {batch}")

            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = [extract_single_page(page_num) for page_num in batch]
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            for j, result in enumerate(batch_results):
                if isinstance(result, Exception):
                    logger.error(f"‚ùå [BATCH] –û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {batch[j]}: {result}")
                    results.append("")  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                else:
                    results.append(result)

        return results
