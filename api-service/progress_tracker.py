"""
–¢—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏.
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
"""

import time
from typing import Dict, Optional
from dataclasses import dataclass, field
import logging

logger = logging.getLogger(__name__)


@dataclass
class StageMetrics:
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–π —Å—Ç–∞–¥–∏–∏"""
    name: str
    time_per_page: float  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Å–µ–∫—É–Ω–¥—ã)
    time_per_requirement: float  # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ (—Å–µ–∫—É–Ω–¥—ã)
    base_overhead: float  # –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ —Å—Ç–∞–¥–∏–∏ (—Å–µ–∫—É–Ω–¥—ã)


# –†–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ —Ç–µ—Å—Ç–∞—Ö —Å gpt-4o-mini
STAGE_METRICS = {
    "stage1": StageMetrics(
        name="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
        time_per_page=1.2,  # ~1.2 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (crops + API)
        time_per_requirement=0,
        base_overhead=3.0
    ),
    "stage2": StageMetrics(
        name="–û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏",
        time_per_page=2.5,  # ~2.5 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Vision API high-res)
        time_per_requirement=0.5,  # +0.5 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
        base_overhead=5.0
    ),
    "stage3": StageMetrics(
        name="–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        time_per_page=3.0,  # ~3 —Å–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É (Vision API high-res)
        time_per_requirement=5.0,  # ~5 —Å–µ–∫ –Ω–∞ –∫–∞–∂–¥–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ (–∞–Ω–∞–ª–∏–∑ + –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞)
        base_overhead=10.0
    ),
    "stage4": StageMetrics(
        name="–ü–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π",
        time_per_page=2.0,
        time_per_requirement=0,
        base_overhead=8.0
    ),
}


class ProgressTracker:
    """
    –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è.
    """

    def __init__(self, total_pages: int, total_requirements: int):
        self.total_pages = total_pages
        self.total_requirements = total_requirements

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self.current_stage: Optional[str] = None
        self.stage_start_time: float = 0
        self.analysis_start_time: float = time.time()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å—Ç–∞–¥–∏—è–º
        self.stage_progress: Dict[str, Dict] = {}

        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        self.actual_times: Dict[str, float] = {}

        logger.info(f"üöÄ ProgressTracker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü, {total_requirements} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")

    def start_stage(self, stage_name: str, items_count: int = 0) -> None:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç–∞–¥–∏—é"""
        self.current_stage = stage_name
        self.stage_start_time = time.time()

        self.stage_progress[stage_name] = {
            "items_processed": 0,
            "items_total": items_count or self._estimate_items_for_stage(stage_name),
            "start_time": self.stage_start_time,
        }

        logger.info(f"üìä –ù–∞—á–∞—Ç–∞ —Å—Ç–∞–¥–∏—è: {stage_name}, –æ–±—Ä–∞–±–æ—Ç–∫–∞ {self.stage_progress[stage_name]['items_total']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    def update_stage_progress(self, items_processed: int) -> Dict:
        """
        –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {"progress": 0-100, "eta_seconds": int, "current_item": str}
        """
        if not self.current_stage:
            return {"progress": 0, "eta_seconds": 0, "current_item": "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"}

        stage_info = self.stage_progress[self.current_stage]
        stage_info["items_processed"] = items_processed

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Å—Ç–∞–¥–∏–∏
        stage_progress = min(100, (items_processed / stage_info["items_total"]) * 100) if stage_info["items_total"] > 0 else 0

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º ETA –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
        elapsed = time.time() - stage_info["start_time"]
        if items_processed > 0:
            time_per_item = elapsed / items_processed
            remaining_items = stage_info["items_total"] - items_processed
            stage_eta = time_per_item * remaining_items
        else:
            stage_eta = self._estimate_stage_time(self.current_stage)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ ETA
        overall_progress, overall_eta = self._calculate_overall_progress()

        current_item_description = self._format_current_item(items_processed, stage_info["items_total"])

        logger.debug(f"üìà –ü—Ä–æ–≥—Ä–µ—Å—Å {self.current_stage}: {stage_progress:.1f}% (—ç–ª–µ–º–µ–Ω—Ç {items_processed}/{stage_info['items_total']}), ETA: {stage_eta:.0f}s")

        return {
            "progress": overall_progress,
            "stage_progress": stage_progress,
            "eta_seconds": int(overall_eta),
            "stage_eta_seconds": int(stage_eta),
            "current_item": current_item_description,
            "stage_name": STAGE_METRICS.get(self.current_stage, StageMetrics("", 0, 0, 0)).name,
        }

    def complete_stage(self) -> None:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–∞–¥–∏—é –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not self.current_stage:
            return

        stage_info = self.stage_progress[self.current_stage]
        actual_time = time.time() - stage_info["start_time"]
        self.actual_times[self.current_stage] = actual_time

        logger.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Å—Ç–∞–¥–∏—è: {self.current_stage}, –≤—Ä–µ–º—è: {actual_time:.1f}s")

        self.current_stage = None
        self.stage_start_time = 0

    def _estimate_items_for_stage(self, stage_name: str) -> int:
        """–û—Ü–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ —Å—Ç–∞–¥–∏–∏"""
        if stage_name == "stage1":
            return min(self.total_pages, 150)  # STAGE1_MAX_PAGES
        elif stage_name == "stage2":
            return min(self.total_pages, 100)  # STAGE2_MAX_PAGES
        elif stage_name == "stage3":
            # –í Stage 3 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –±–∞—Ç—á–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            return self.total_requirements
        elif stage_name == "stage4":
            return min(self.total_pages, 50)  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞
        return 10

    def _estimate_stage_time(self, stage_name: str) -> float:
        """–û—Ü–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ç–∞–¥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        metrics = STAGE_METRICS.get(stage_name)
        if not metrics:
            return 60.0  # Fallback

        items_count = self._estimate_items_for_stage(stage_name)

        estimated_time = metrics.base_overhead

        if stage_name in ["stage1", "stage2", "stage4"]:
            estimated_time += items_count * metrics.time_per_page
        elif stage_name == "stage3":
            # Stage 3: –≤—Ä–µ–º—è –∑–∞–≤–∏—Å–∏—Ç –∏ –æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –æ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
            avg_pages_per_req = 5  # –í —Å—Ä–µ–¥–Ω–µ–º 5 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
            estimated_time += self.total_requirements * metrics.time_per_requirement
            estimated_time += self.total_requirements * avg_pages_per_req * (metrics.time_per_page / 10)  # –°—Ç—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–∞—Ç—á–∞–º–∏

        return estimated_time

    def _calculate_overall_progress(self) -> tuple[float, float]:
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ ETA –¥–ª—è –≤—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.
        Returns: (progress_percent, eta_seconds)
        """
        # –í–µ—Å–∞ —Å—Ç–∞–¥–∏–π (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∏—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
        stage_weights = {
            "stage1": 0.15,  # 15% - –±—ã—Å—Ç—Ä–∞—è —Å—Ç–∞–¥–∏—è
            "stage2": 0.25,  # 25% - —Å—Ä–µ–¥–Ω—è—è —Å—Ç–∞–¥–∏—è
            "stage3": 0.55,  # 55% - —Å–∞–º–∞—è –¥–æ–ª–≥–∞—è —Å—Ç–∞–¥–∏—è
            "stage4": 0.05,  # 5% - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è, –±—ã—Å—Ç—Ä–∞—è
        }

        total_progress = 0.0
        total_eta = 0.0

        for stage_name, weight in stage_weights.items():
            if stage_name in self.actual_times:
                # –°—Ç–∞–¥–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
                total_progress += weight * 100
            elif stage_name == self.current_stage:
                # –¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è
                stage_info = self.stage_progress.get(stage_name, {})
                items_processed = stage_info.get("items_processed", 0)
                items_total = stage_info.get("items_total", 1)
                stage_progress_pct = (items_processed / items_total) * 100 if items_total > 0 else 0

                total_progress += weight * stage_progress_pct

                # ETA —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–¥–∏–∏
                elapsed = time.time() - stage_info.get("start_time", time.time())
                if items_processed > 0:
                    time_per_item = elapsed / items_processed
                    remaining_items = items_total - items_processed
                    total_eta += time_per_item * remaining_items
                else:
                    total_eta += self._estimate_stage_time(stage_name)

            elif stage_name not in self.actual_times:
                # –°—Ç–∞–¥–∏—è –µ—â–µ –Ω–µ –Ω–∞—á–∞—Ç–∞
                total_eta += self._estimate_stage_time(stage_name)

        return min(total_progress, 99.0), max(total_eta, 0)  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 100% –¥–æ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    def _format_current_item(self, processed: int, total: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self.current_stage:
            return "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"

        stage_name = STAGE_METRICS.get(self.current_stage, StageMetrics("–û–±—Ä–∞–±–æ—Ç–∫–∞", 0, 0, 0)).name

        if self.current_stage == "stage1":
            return f"{stage_name}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {processed}/{total}"
        elif self.current_stage == "stage2":
            return f"{stage_name}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {processed}/{total}"
        elif self.current_stage == "stage3":
            return f"{stage_name}: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ {processed}/{total}"
        elif self.current_stage == "stage4":
            return f"{stage_name}: —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {processed}/{total}"

        return f"{stage_name}: —ç–ª–µ–º–µ–Ω—Ç {processed}/{total}"

    def get_summary(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Å–≤–æ–¥–∫—É –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        total_time = time.time() - self.analysis_start_time

        summary = {
            "total_time_seconds": total_time,
            "total_pages": self.total_pages,
            "total_requirements": self.total_requirements,
            "stages": {},
        }

        for stage_name, actual_time in self.actual_times.items():
            estimated_time = self._estimate_stage_time(stage_name)
            summary["stages"][stage_name] = {
                "name": STAGE_METRICS.get(stage_name, StageMetrics("", 0, 0, 0)).name,
                "actual_time": actual_time,
                "estimated_time": estimated_time,
                "difference": actual_time - estimated_time,
            }

        logger.info(f"üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {total_time:.1f}s –¥–ª—è {self.total_pages} —Å—Ç—Ä–∞–Ω–∏—Ü –∏ {self.total_requirements} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π")

        return summary
