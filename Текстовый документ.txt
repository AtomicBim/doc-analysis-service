Developer: Проанализируй текущее приложение. Веб-интерфейс реализован на gradio. Твоя задача — создать продвинутый веб-интерфейс на React с сохранением логики gradio и максимальной совместимостью с существующим backend. Реализацию помести в папку @ui-react-service, собирая приложение через Docker и поднимая его через docker-compose на порте 7862.

Перед началом работы составь короткий чек-лист основных подзадач (3–7 пунктов), охватывающих ключевые этапы реализации.

### Функциональные требования:
1. В левой части экрана: перечень требований, где для каждого требования отображается связанная информация (логика, аналогичная gradio): само требование, все связанные с ним поля — решение, вероятность, страница и т.д. Для интеграции используй тот же способ сопоставления и хранения данных, что в gradio.
2. В верхней части: размести кнопки, идентичные gradio (выбор стадии, кнопка для подключения ТУ на проектирование и т.п.; форма для дополнительной загрузки ТУ (если понадобится) не требуется).
3. В правой части: показывай выбранный или загруженный проект в онлайн-просмотрщике PDF.
4. PDF-просмотрщик должен поддерживать плавную прокрутку.
5. При выборе требования слева, справа PDF открывается автоматически на странице, соответствующей реализации данного требования.

Для сохранения стабильной работы других частей приложения, старайся не изменять логику существующего backend. Корректировки (например, добавление новых endpoint или изменение структуры ответа) допускаются только при необходимости.

### Docker-интеграция:
- React-приложение должно быть упаковано в Docker-контейнер и запускаться через docker-compose (проверь общий docker-compose и отдельный Dockerfile для React).
- Порт для запуска react веб-интерфейса: 7862.
- Итоговое решение должно позволять работать одновременно через gradio и через react-интерфейс, поэтому минимизируй изменения backend.

После выполнения каждого значимого изменения (например, интеграция с backend или docker-сборка), кратко проверь результат (1–2 предложения: что изменено, что дальше, если требуется — исправь проблему).

---

#### Формат данных требований
- Как в существующем решении, однако если надо можно добавить или убавить пол - главное чтобы оригинальное приложение продолжало работать с gradio.

#### Взаимодействие с backend
- Как в существующем решении.

#### Требования к PDF-просмотрщику
Рекомендуется использовать существующие библиотеки для React (например, react-pdf или pdf.js) с возможностью программной прокрутки на нужную страницу (например, через ref или API).

Соблюдай рекомендуемый стиль и структуру кода. После ключевых этапов внедрения проверь интеграцию и корректную работу каждого модуля, но имей ввиду,что запускаться решение будет на другой виртуальной машине.