
import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import { Requirement } from '../types';
import { EditableRequirement } from './RequirementEditor';
import FileUpload from './FileUpload';
import StageSelector from './StageSelector';
import { API_URL, TIMEOUTS, MESSAGES, STAGE_ICONS } from '../constants';
import { formatApiError } from '../utils/errorFormatter';
import './Header.css';

interface HeaderProps {
  onRequirementsExtracted: (requirements: EditableRequirement[]) => void;
  onAnalysisComplete: (
    requirements: Requirement[],
    summary: string,
    sheetToPdfMapping?: Record<string, number>
  ) => void;
  onDocFileChange: (file: File | null) => void;
  confirmedRequirements: EditableRequirement[] | null;
  analysisCompleted?: boolean;
  onReset?: () => void;
}

const Header: React.FC<HeaderProps> = ({ 
  onRequirementsExtracted,
  onAnalysisComplete, 
  onDocFileChange,
  confirmedRequirements,
  analysisCompleted = false,
  onReset
}) => {
  const [stage, setStage] = useState('–§–≠');
  const [tzFile, setTzFile] = useState<File | null>(null);
  const [docFile, setDocFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [analysisProgress, setAnalysisProgress] = useState(0);
  const [realTimeStatus, setRealTimeStatus] = useState<any>(null);
  const [pollingErrors, setPollingErrors] = useState(0);
  const statusPollingRef = useRef<NodeJS.Timeout | null>(null);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥: 1 - –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π, 2 - –∞–Ω–∞–ª–∏–∑
  const currentStep = confirmedRequirements ? 2 : 1;

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
  const fetchStatus = async (endpoint: string) => {
    try {
      const response = await axios.get(`${API_URL}/${endpoint}`);
      const data = response.data;
      
      setRealTimeStatus(data);
      setAnalysisProgress(data.progress || 0);
      setPollingErrors(0); // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    } catch (err) {
      console.error('Status fetch error:', err);
      setPollingErrors(prev => prev + 1);
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –ø–æ—Å–ª–µ 10 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (20 —Å–µ–∫—É–Ω–¥)
      if (pollingErrors >= 10) {
        if (statusPollingRef.current) {
          clearInterval(statusPollingRef.current);
          statusPollingRef.current = null;
        }
        setError('–ü–æ—Ç–µ—Ä—è–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      }
    }
  };

  // Polling —Å—Ç–∞—Ç—É—Å–∞ –∞–Ω–∞–ª–∏–∑–∞
  useEffect(() => {
    if (loading) {
      const endpoint = currentStep === 1 ? 'extraction_status' : 'status';
      statusPollingRef.current = setInterval(() => fetchStatus(endpoint), TIMEOUTS.STATUS_POLLING);
    } else {
      if (statusPollingRef.current) {
        clearInterval(statusPollingRef.current);
        statusPollingRef.current = null;
      }
      setRealTimeStatus(null);
      setAnalysisProgress(0);
      setPollingErrors(0);
    }

    return () => {
      if (statusPollingRef.current) {
        clearInterval(statusPollingRef.current);
      }
    };
  }, [loading, currentStep]);

  // –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ –∑–∞–ø—Ä–æ—Å—É
  const prepareForRequest = () => {
    setLoading(true);
    setError(null);
    setAnalysisProgress(0);
    setPollingErrors(0);
  };

  // –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¢–ó
  const handleExtractRequirements = async () => {
    if (!tzFile) {
      setError(MESSAGES.ERROR.TZ_FILE_REQUIRED);
      return;
    }

    prepareForRequest();
    const formData = new FormData();
    formData.append('tz_document', tzFile);

    try {
      const response = await axios.post(`${API_URL}/extract_requirements`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: TIMEOUTS.REQUIREMENTS_EXTRACTION,
      });

      onRequirementsExtracted(response.data.requirements);
    } catch (err) {
      setError(formatApiError(err, MESSAGES.ERROR.REQUIREMENTS_EXTRACTION));
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
  const handleAnalyzeProject = async () => {
    if (!docFile || !confirmedRequirements) {
      setError(MESSAGES.ERROR.DOC_FILE_REQUIRED);
      return;
    }

    prepareForRequest();
    const formData = new FormData();
    formData.append('stage', stage);
    formData.append('requirements_json', JSON.stringify(confirmedRequirements));
    formData.append('doc_document', docFile);

    try {
      const response = await axios.post(`${API_URL}/analyze`, formData, {
        headers: { 'Content-Type': 'multipart/form-data' },
        timeout: TIMEOUTS.PROJECT_ANALYSIS,
      });

      const { requirements, summary, sheet_to_pdf_mapping } = response.data;
      console.log('üìÑ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞:', { requirements: requirements.length, mapping: sheet_to_pdf_mapping });
      onAnalysisComplete(requirements, summary, sheet_to_pdf_mapping);
    } catch (err) {
      setError(formatApiError(err, MESSAGES.ERROR.PROJECT_ANALYSIS));
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—á–∏—Å—Ç–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
  const hasStoredData = confirmedRequirements !== null || analysisCompleted;

  return (
    <header className="header">
      <div className="header-content">
        <div className="header-title">
          <h1>–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</h1>
          <p className="header-subtitle">
            {currentStep === 1 
              ? '–®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏–∑ –¢–ó' 
              : `–®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (${confirmedRequirements?.filter(r => r.selected).length} —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)`}
          </p>
        </div>
        
        {/* –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö */}
        {hasStoredData && onReset && !loading && (
          <button 
            className="btn-clear-data"
            onClick={onReset}
            title="–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
          >
            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë
          </button>
        )}
        
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —à–∞–≥–æ–≤ */}
        <div className="steps-indicator">
          <div className={`step ${currentStep >= 1 ? 'active' : ''} ${currentStep > 1 ? 'completed' : ''}`}>
            <div className="step-number">{currentStep > 1 ? '‚úì' : '1'}</div>
            <div className="step-label">–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π</div>
          </div>
          <div className="step-divider"></div>
          <div className={`step ${currentStep >= 2 ? 'active' : ''} ${analysisCompleted ? 'completed' : ''}`}>
            <div className="step-number">{analysisCompleted ? '‚úì' : '2'}</div>
            <div className="step-label">–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞</div>
          </div>
        </div>
        
        <div className="controls-grid">
          {/* –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¢–ó */}
          {currentStep === 1 && (
            <>
              <FileUpload
                label="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)"
                accept=".pdf,.docx"
                fileName={tzFile?.name}
                onChange={setTzFile}
              />

              <div className="control-group button-group">
                <button 
                  className={`analyze-button ${loading ? 'loading' : ''}`}
                  onClick={handleExtractRequirements} 
                  disabled={loading || !tzFile}
                >
                  {loading ? (
                    <>
                      <span className="spinner"></span>
                      –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π...
                    </>
                  ) : (
                    'üìã –ò–∑–≤–ª–µ—á—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ –¢–ó'
                  )}
                </button>
              </div>
            </>
          )}

          {/* –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ */}
          {currentStep === 2 && (
            <>
              <StageSelector
                value={stage}
                onChange={setStage}
                disabled={loading}
              />

              <FileUpload
                label="–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
                accept=".pdf"
                fileName={docFile?.name}
                onChange={(file) => {
                  setDocFile(file);
                  onDocFileChange(file); // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª –≤ App –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                }}
                disabled={loading}
              />

              <div className="control-group button-group">
                <button 
                  className={`analyze-button ${loading ? 'loading' : ''}`}
                  onClick={handleAnalyzeProject} 
                  disabled={loading || !docFile}
                >
                  {loading ? (
                    <>
                      <span className="spinner"></span>
                      –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...
                    </>
                  ) : (
                    'üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞'
                  )}
                </button>
              </div>
            </>
          )}
        </div>

        {error && (
          <div className="error-message">
            <span className="error-icon">‚ö†Ô∏è</span>
            <span className="error-text">{error}</span>
          </div>
        )}

        {loading && (
          <div className="progress-container">
            <div className="progress-header">
              <span className="progress-title">üîÑ –ê–Ω–∞–ª–∏–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</span>
              <span className="progress-percentage">{analysisProgress}%</span>
            </div>
            
            <div className="progress-bar">
              <div
                className="progress-fill"
                style={{
                  width: `${analysisProgress}%`,
                  background: analysisProgress < 30
                    ? 'linear-gradient(90deg, #3b82f6, #60a5fa)'
                    : analysisProgress < 70
                    ? 'linear-gradient(90deg, #8b5cf6, #a78bfa)'
                    : 'linear-gradient(90deg, #10b981, #34d399)'
                }}
              >
                <div className="progress-shimmer"></div>
              </div>
            </div>

            {/* –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω */}
            {realTimeStatus && realTimeStatus.stage_name && (
              <div className="progress-stage">
                <span className="stage-icon">
                  {STAGE_ICONS[realTimeStatus.current_stage as keyof typeof STAGE_ICONS] || 'üìä'}
                </span>
                <span className="stage-text">
                  –≠—Ç–∞–ø {realTimeStatus.current_stage}/{realTimeStatus.total_stages}: {realTimeStatus.stage_name}
                </span>
              </div>
            )}
            
            <div className="progress-info">
              <small>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.</small>
            </div>
          </div>
        )}
      </div>
    </header>
  );
};

export default Header;
