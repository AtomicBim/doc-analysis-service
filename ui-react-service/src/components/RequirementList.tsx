
import React from 'react';
import { Requirement } from '../types';
import './RequirementList.css';

interface RequirementListProps {
  requirements: Requirement[];
  onSelect: (page: number, highlightText?: string) => void;
}

interface PageReference {
  page: number;
  description: string;
}

const RequirementList: React.FC<RequirementListProps> = ({ requirements, onSelect }) => {
  // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–∏—Å—Ç–æ–≤ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ –∏–∑ —Ä–µ—à–µ–Ω–∏—è
  const extractPageReferences = (solution: string): PageReference[] => {
    const references: PageReference[] = [];
    
    // Regex –¥–ª—è –ø–æ–∏—Å–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –ª–∏—Å—Ç–æ–≤: "–Ω–∞ –ª–∏—Å—Ç–µ 5", "–ª–∏—Å—Ç 17", "—Å—Ç—Ä–∞–Ω–∏—Ü–µ 10" –∏ —Ç.–¥.
    const pageRegex = /(?:–Ω–∞\s+)?(?:–ª–∏—Å—Ç[–µ]?|—Å—Ç—Ä–∞–Ω–∏—Ü[–∞–µ])\s+(\d+)\s*[-‚Äì‚Äî]?\s*([^.;]*(?:[.;][^;.]*?(?=(?:–ª–∏—Å—Ç[–µ]?|—Å—Ç—Ä–∞–Ω–∏—Ü[–∞–µ]|\d+\s*[-‚Äì‚Äî]|$)))?)/gi;
    
    let match;
    while ((match = pageRegex.exec(solution)) !== null) {
      const pageNum = parseInt(match[1], 10);
      let description = match[2] ? match[2].trim() : '';
      
      // –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
      description = description.replace(/^[-‚Äì‚Äî:,;\s]+/, '').replace(/[;.,]+$/, '').trim();
      
      // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—É—Å—Ç–æ–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –±–µ—Ä–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–∏—Å—Ç–∞
      if (!description || description.length < 10) {
        const startIndex = match.index + match[0].length;
        const contextLength = 100;
        const endIndex = Math.min(startIndex + contextLength, solution.length);
        description = solution.substring(startIndex, endIndex).trim();
        
        // –û–±—Ä–µ–∑–∞–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        const sentenceEnd = description.search(/[.;]/);
        if (sentenceEnd !== -1) {
          description = description.substring(0, sentenceEnd).trim();
        }
      }
      
      // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ–±—Ä–µ–∑–∞–µ–º
      if (description.length > 150) {
        description = description.substring(0, 147) + '...';
      }
      
      if (pageNum && pageNum < 1000) {
        references.push({ page: pageNum, description });
      }
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏—á–µ–≥–æ —Å –ø–æ–º–æ—â—å—é regex, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
    if (references.length === 0) {
      // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const sentences = solution.split(/[.;]+/).filter(s => s.trim());
      
      sentences.forEach(sentence => {
        const simplePageRegex = /(?:–ª–∏—Å—Ç[–µ]?|—Å—Ç—Ä–∞–Ω–∏—Ü[–∞–µ])\s+(\d+)/i;
        const match = sentence.match(simplePageRegex);
        
        if (match) {
          const pageNum = parseInt(match[1], 10);
          let description = sentence.trim();
          
          // –£–±–∏—Ä–∞–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ª–∏—Å—Ç–∞
          const pageIndex = description.search(simplePageRegex);
          if (pageIndex > 0) {
            description = description.substring(pageIndex + match[0].length).trim();
          }
          
          if (description.length > 150) {
            description = description.substring(0, 147) + '...';
          }
          
          if (pageNum && pageNum < 1000) {
            references.push({ page: pageNum, description: description || sentence.trim() });
          }
        }
      });
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    const uniqueRefs = references.filter((ref, index, self) => 
      index === self.findIndex(r => r.page === ref.page)
    );
    
    return uniqueRefs.sort((a, b) => a.page - b.page);
  };

  const getStatusColor = (status: string): string => {
    if (status === '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return 'status-complete';
    if (status === '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return 'status-partial';
    if (status === '–ù–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return 'status-failed';
    return 'status-unclear';
  };

  const getStatusIcon = (status: string): string => {
    if (status === '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return '‚úÖ';
    if (status === '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return '‚ö†Ô∏è';
    if (status === '–ù–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ') return '‚ùå';
    return '‚ùì';
  };

  return (
    <div className="requirement-list-container">
      <div className="requirement-list-header">
        <h2>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è</h2>
        {requirements.length > 0 && (
          <div className="stats">
            <span className="stat-badge">–í—Å–µ–≥–æ: {requirements.length}</span>
            <span className="stat-badge stat-complete">
              ‚úÖ {requirements.filter(r => r.status === '–ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª–Ω–µ–Ω–æ').length}
            </span>
            <span className="stat-badge stat-partial">
              ‚ö†Ô∏è {requirements.filter(r => r.status === '–ß–∞—Å—Ç–∏—á–Ω–æ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ').length}
            </span>
            <span className="stat-badge stat-failed">
              ‚ùå {requirements.filter(r => r.status === '–ù–µ –∏—Å–ø–æ–ª–Ω–µ–Ω–æ').length}
            </span>
          </div>
        )}
      </div>
      
      {requirements.length === 0 ? (
        <div className="empty-state">
          <div className="empty-icon">üìã</div>
          <p className="empty-text">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</p>
          <p className="empty-hint">–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –∏ –Ω–∞–∂–º–∏—Ç–µ "–í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑"</p>
        </div>
      ) : (
        <div className="requirements-list">
          {requirements.map((req) => {
            const pageReferences = extractPageReferences(req.solution_description);
            const statusClass = getStatusColor(req.status);
            const statusIcon = getStatusIcon(req.status);
            
            return (
              <div
                key={req.number}
                className="requirement-card"
              >
                <div className="requirement-header">
                  <span className="requirement-number">#{req.number}</span>
                  <span className={`requirement-status ${statusClass}`}>
                    {statusIcon} {req.status}
                  </span>
                </div>
                
                <div className="requirement-content">
                  <p className="requirement-text">{req.requirement}</p>
                  
                  <div className="requirement-details">
                    <div className="detail-item">
                      <span className="detail-label">–†–µ—à–µ–Ω–∏–µ:</span>
                      <span className="detail-value">{req.solution_description}</span>
                    </div>
                    
                    {/* –°—Å—ã–ª–∫–∏ —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è–º–∏ */}
                    {pageReferences.length > 0 && (
                      <div className="detail-item references-section">
                        <span className="detail-label">–°—Å—ã–ª–∫–∏:</span>
                        <div className="reference-items">
                          {pageReferences.map((ref, idx) => (
                            <div key={idx} className="reference-item">
                              <div className="reference-info">
                                <span className="reference-page">–õ–∏—Å—Ç {ref.page}</span>
                                {ref.description && (
                                  <span className="reference-description">
                                    {ref.description}
                                  </span>
                                )}
                              </div>
                              <button
                                className="reference-button"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  onSelect(ref.page, ref.description);
                                }}
                                title={`–ü–µ—Ä–µ–π—Ç–∏ –∫ –ª–∏—Å—Ç—É ${ref.page} –∏ –Ω–∞–π—Ç–∏: ${ref.description}`}
                              >
                                üìÑ –ü–µ—Ä–µ–π—Ç–∏
                              </button>
                            </div>
                          ))}
                        </div>
                      </div>
                    )}
                    
                    {req.discrepancies && req.discrepancies !== '-' && (
                      <div className="detail-item discrepancy">
                        <span className="detail-label">–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è:</span>
                        <span className="detail-value">{req.discrepancies}</span>
                      </div>
                    )}
                  </div>
                  
                  <div className="requirement-footer">
                    <div className="confidence-bar">
                      <span className="confidence-label">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</span>
                      <div className="confidence-progress">
                        <div 
                          className="confidence-fill" 
                          style={{ 
                            width: `${req.confidence}%`,
                            background: req.confidence >= 80 ? '#10b981' : req.confidence >= 60 ? '#f59e0b' : '#ef4444'
                          }}
                        ></div>
                      </div>
                      <span className="confidence-value">{req.confidence}%</span>
                    </div>
                    {req.section && (
                      <span className="section-badge">{req.section}</span>
                    )}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
};

export default RequirementList;
