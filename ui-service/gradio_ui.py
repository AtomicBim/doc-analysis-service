"""
Gradio –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API-—Å–µ—Ä–≤–∏—Å—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞.
"""
import os
import json
import gradio as gr
import requests
from typing import Optional, Tuple
from pathlib import Path
from dotenv import load_dotenv

# ============================ 
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================ 

load_dotenv()

API_SERVICE_URL = os.getenv("API_SERVICE_URL", "http://doc-analysis-api:8000")

STAGES = {
    "–ì–ö": "–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è",
    "–§–≠": "–§–æ—Ä—ç—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "–≠–ü": "–≠—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç"
}

# –î–æ–±–∞–≤–ª–µ–Ω –¢–ó –¥–ª—è –æ–±—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
REQUIREMENT_TYPES = {
    "–¢–ó": "–¢–ó –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)",
    "–¢–£_–§–≠": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –§–≠",
    "–¢–£_–≠–ü": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≠–ü"
}

ALLOWED_FORMATS = [".docx", ".pdf"]

# ============================ 
# –í–ê–õ–ò–î–ê–¶–ò–Ø (–æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏)
# ============================ 

def validate_all_inputs(
    tz_file,
    doc_file,
    stage: str,
    check_tu: bool,
    tu_file=None
) -> Tuple[bool, str]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    if tz_file is None:
        return False, json.dumps({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"}, ensure_ascii=False)
    
    if doc_file is None:
        return False, json.dumps({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"}, ensure_ascii=False)

    if check_tu:
        if stage not in ["–§–≠", "–≠–ü"] and tu_file is None:
            return False, json.dumps({"error": "–î–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–¥–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¢–£ –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –æ–ø—Ü–∏—é –ø—Ä–æ–≤–µ—Ä–∫–∏ –¢–£"}, ensure_ascii=False)

    return True, ""

# ============================ 
# –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API
# ============================ 

def call_analysis_api(
    stage: str,
    check_tu: bool,
    tz_file_path: str,
    doc_file_path: str,
    tu_file_path: Optional[str] = None
) -> dict:
    """
    –í—ã–∑–æ–≤ API-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø—É—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤.
    """
    session = requests.Session()

    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã —Å context manager –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        with open(tz_file_path, 'rb') as tz_f, open(doc_file_path, 'rb') as doc_f:
            files_to_send = {
                'tz_document': (Path(tz_file_path).name, tz_f, 'application/octet-stream'),
                'doc_document': (Path(doc_file_path).name, doc_f, 'application/octet-stream')
            }

            data_to_send = {
                "stage": stage,
                "check_tu": str(check_tu).lower(),
                "req_type": "–¢–ó"
            }

            # –ï—Å–ª–∏ –µ—Å—Ç—å –¢–£ —Ñ–∞–π–ª (–¥–ª—è —Å—Ç–∞–¥–∏–π, –≥–¥–µ –æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω), –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º
            if tu_file_path:
                with open(tu_file_path, 'rb') as tu_f:
                    files_to_send['tu_document'] = (Path(tu_file_path).name, tu_f, 'application/octet-stream')

                    print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∫ API: {API_SERVICE_URL}/analyze")
                    response = session.post(
                        f"{API_SERVICE_URL}/analyze",
                        files=files_to_send,
                        data=data_to_send,
                        timeout=2400  # 40 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (100+ —Å—Ç—Ä–∞–Ω–∏—Ü, 30+ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)
                    )
                    response.raise_for_status()
                    return response.json()

            print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –∫ API: {API_SERVICE_URL}/analyze")
            response = session.post(
                f"{API_SERVICE_URL}/analyze",
                files=files_to_send,
                data=data_to_send,
                timeout=2400  # 40 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ (100+ —Å—Ç—Ä–∞–Ω–∏—Ü, 30+ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π)
            )
            response.raise_for_status()
            return response.json()

    except requests.exceptions.ConnectionError:
        return {
            "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API-—Å–µ—Ä–≤–∏—Å—É –ø–æ –∞–¥—Ä–µ—Å—É {API_SERVICE_URL}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω."
        }
    except requests.exceptions.Timeout:
        return {
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞ (40 –º–∏–Ω—É—Ç). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å Stage 4 (–ø–æ–∏—Å–∫ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π) –≤ config.py –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        }
    except requests.exceptions.HTTPError as e:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å detail –∏–∑ JSON-–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        try:
            detail = e.response.json().get('detail', e.response.text)
        except json.JSONDecodeError:
            detail = e.response.text
        return {
            "error": f"–û—à–∏–±–∫–∞ HTTP –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞: {e.response.status_code} - {detail}"
        }
    except Exception as e:
        return {
            "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}"
        }
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
        session.close()

# ============================ 
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# ============================ 

def format_analysis_results(api_response: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Markdown."""
    if "error" in api_response:
        return f"## ‚ùå –û—à–∏–±–∫–∞\n\n```\n{api_response['error']}\n```"

    stage = api_response.get("stage", "")
    req_type = api_response.get("req_type", "")
    requirements = api_response.get("requirements", [])
    summary = api_response.get("summary", "")

    table_rows = []
    for req in requirements:
        row = f"| {req.get('number', '-')} | {req.get('requirement', '-')} | {req.get('status', '-')} | {req.get('confidence', 0)} | {req.get('solution_description', '-')} | {req.get('reference', '-')} | {req.get('discrepancies', '-')} | {req.get('recommendations', '-')} |"
        table_rows.append(row)

    table = "\n".join(table_rows) if table_rows else "| - | –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã | - | - | - | - | - | - |"

    result = f"""
## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

**–°—Ç–∞–¥–∏—è:** {STAGES.get(stage, stage)}
**–¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {REQUIREMENT_TYPES.get(req_type, req_type)}

---

### üìä –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

| ‚Ññ | –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó | –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è | –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å (%) | –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è | –°—Å—ã–ª–∫–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏—Å—Ç/—Å—Ç—Ä–∞–Ω–∏—Ü–∞) | –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ |
|---|------------------|-------------------|-------------------|------------------|----------------------------------|----------------------------------------|--------------|
{table}

---

### üìù –û–±—â–∞—è —Å–≤–æ–¥–∫–∞

{summary}

---

**–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {len(requirements)}
"""

    return result

# ============================ 
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò
# ============================ 

def process_documentation_analysis(
    tz_file,
    doc_file,
    stage: str,
    check_tu: bool,
    tu_file=None
) -> str:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."""
    print("üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞...")

    valid, error_msg = validate_all_inputs(tz_file, doc_file, stage, check_tu, tu_file)
    if not valid:
        return f"## ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n\n```json\n{error_msg}\n```"

    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API-—Å–µ—Ä–≤–∏—Å—É...")

    # Gradio File object –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç .name —Å –ø—É—Ç–µ–º –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
    api_response = call_analysis_api(
        stage=stage,
        check_tu=check_tu,
        tz_file_path=tz_file.name,
        doc_file_path=doc_file.name,
        tu_file_path=tu_file.name if tu_file else None
    )

    print("üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")

    result = format_analysis_results(api_response)

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
    return result

def update_tu_visibility(stage: str, check_tu: bool):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¢–£: —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¢–£ –∏ —Å—Ç–∞–¥–∏—è –Ω–µ –§–≠/–≠–ü."""
    needs_tu_upload = bool(check_tu and stage not in ["–§–≠", "–≠–ü"])  # –ü–î/–†–î —É–¥–∞–ª–µ–Ω—ã
    return gr.update(visible=needs_tu_upload)

# ============================ 
# GRADIO –ò–ù–¢–ï–†–§–ï–ô–°
# ============================ 

def create_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    with gr.Blocks(title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", theme=gr.themes.Soft()) as interface:
        gr.Markdown("""
        # üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó/–¢–£ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI.

        ‚ö†Ô∏è **–í–ê–ñ–ù–û:** –ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ —ç—Ç—É –≤–∫–ª–∞–¥–∫—É –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞! –ü—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–µ—Ä–≤–∞–Ω,
        –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Ç–µ—Ä—è–µ—Ç—Å—è, –∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ.
        """)

        with gr.Row():
            with gr.Column(scale=1):
                gr.Markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")
                tz_file = gr.File(label="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)", file_types=ALLOWED_FORMATS)
                doc_file = gr.File(label="–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", file_types=ALLOWED_FORMATS)
                tu_file = gr.File(label="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è (–¢–£)", file_types=ALLOWED_FORMATS, visible=False)

            with gr.Column(scale=1):
                gr.Markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
                stage = gr.Radio(choices=list(STAGES.keys()), label="–°—Ç–∞–¥–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", value="–§–≠")
                check_tu = gr.Checkbox(label="–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –¢–£", value=False)
                gr.Markdown(f"**API —Å–µ—Ä–≤–∏—Å:** `{API_SERVICE_URL}`")

        analyze_btn = gr.Button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑", variant="primary", size="lg")
        
        status = gr.Textbox(label="–°—Ç–∞—Ç—É—Å", interactive=False, visible=False)
        output = gr.Markdown(label="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")

        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        stage.change(fn=update_tu_visibility, inputs=[stage, check_tu], outputs=[tu_file])
        check_tu.change(fn=update_tu_visibility, inputs=[stage, check_tu], outputs=[tu_file])

        analyze_btn.click(
            fn=process_documentation_analysis,
            inputs=[tz_file, doc_file, stage, check_tu, tu_file],
            outputs=[output]
        )

    return interface

# ============================ 
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================ 

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Gradio UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    print(f"üì° API —Å–µ—Ä–≤–∏—Å: {API_SERVICE_URL}")
    interface = create_interface()
    interface.launch(server_name="0.0.0.0", server_port=7861, share=False)