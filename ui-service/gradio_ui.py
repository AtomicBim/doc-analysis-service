"""
Gradio –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
–†–∞–±–æ—Ç–∞–µ—Ç –≤ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏ –ë–ï–ó –ø—Ä–æ–∫—Å–∏
–û–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ API-—Å–µ—Ä–≤–∏—Å—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ Google Gemini
"""
import os
import json
import gradio as gr
import requests
from typing import Optional, Tuple
from pathlib import Path
from dotenv import load_dotenv


# ============================
# –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø
# ============================

load_dotenv()

# URL API-—Å–µ—Ä–≤–∏—Å–∞ (–º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
API_SERVICE_URL = os.getenv("API_SERVICE_URL", "http://doc-analysis-api:8000")

# –°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–º–µ—Ä–æ–≤ –∏–º–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤
VALIDATION_EXAMPLES = {
    "technical_assignment": [
        "tz_project.docx", "tech_assignment.pdf", "tz_rd.docx",
        "tz_", "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ_–∑–∞–¥–∞–Ω–∏–µ", "—Ç–∑_"
    ],
    "documentation": [
        "documentation_fe.pdf", "docs_project.docx", "fe_docs.pdf",
        "documentation_", "docs_", "–ø—Ä–æ–µ–∫—Ç–Ω–∞—è_–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
    ],
    "technical_requirements": [
        "_tu.docx", "_tu.pdf", "tech_requirements_",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ_—É—Å–ª–æ–≤–∏—è", "—Ç—É_"
    ]
}

# –°—Ç–∞–¥–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
STAGES = {
    "–ì–ö": "–ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è",
    "–§–≠": "–§–æ—Ä—ç—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "–≠–ü": "–≠—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç",
    "–ü–î": "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Å—Ç–∞–¥–∏—è –ü)",
    "–†–î": "–†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è"
}

# –¢–∏–ø—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
REQUIREMENT_TYPES = {
    "–¢–ó": "–¢–ó –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–±—â–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è)",
    "–¢–£_–†–î": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –†–î",
    "–¢–£_–ü–î": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ü–î",
    "–¢–£_–§–≠": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –§–≠",
    "–¢–£_–≠–ü": "–¢–£ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –≠–ü"
}

# –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã —Ñ–∞–π–ª–æ–≤
ALLOWED_FORMATS = [".docx", ".pdf"]


# ============================
# –§–£–ù–ö–¶–ò–ò –í–ê–õ–ò–î–ê–¶–ò–ò
# ============================

def validate_file_format(filename: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞"""
    if not filename:
        return False, "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

    file_ext = Path(filename).suffix.lower()
    if file_ext not in ALLOWED_FORMATS:
        return False, f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: {', '.join(ALLOWED_FORMATS)}"

    return True, ""


def validate_file_by_name(filename: str, file_type: str) -> Tuple[bool, str]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞ –ø–æ –∏–º–µ–Ω–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è –ø—Ä–∏–º–µ—Ä–æ–≤"""
    if not filename:
        return False, "–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    format_valid, format_error = validate_file_format(filename)
    if not format_valid:
        return False, format_error

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
    file_basename = Path(filename).stem.lower()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    patterns = VALIDATION_EXAMPLES.get(file_type, [])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    matches = any(pattern.lower() in file_basename for pattern in patterns)

    if not matches:
        examples = ", ".join(VALIDATION_EXAMPLES[file_type][:3])
        return False, f"–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∏–ø—É '{file_type}'. –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º—ë–Ω: {examples}"

    return True, ""


def validate_all_inputs(
    tz_file,
    doc_file,
    stage: str,
    req_type: str,
    tu_file=None
) -> Tuple[bool, str]:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–ó
    if tz_file is None:
        return False, json.dumps({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è"}, ensure_ascii=False)

    valid, error = validate_file_by_name(tz_file.name, "technical_assignment")
    if not valid:
        return False, json.dumps({"error": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {error}"}, ensure_ascii=False)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if doc_file is None:
        return False, json.dumps({"error": "–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"}, ensure_ascii=False)

    valid, error = validate_file_by_name(doc_file.name, "documentation")
    if not valid:
        return False, json.dumps({"error": f"–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: {error}"}, ensure_ascii=False)

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¢–£ –¥–ª—è –†–î –∏ –ü–î
    if req_type in ["–¢–£_–†–î", "–¢–£_–ü–î"]:
        if tu_file is None:
            return False, json.dumps({"error": f"–î–ª—è —Ç–∏–ø–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π '{REQUIREMENT_TYPES[req_type]}' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π"}, ensure_ascii=False)

        valid, error = validate_file_by_name(tu_file.name, "technical_requirements")
        if not valid:
            return False, json.dumps({"error": f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è: {error}"}, ensure_ascii=False)

    return True, ""


# ============================
# –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í
# ============================

def extract_file_content(file_path: str) -> str:
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–∞

    –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏:
    - python-docx –¥–ª—è DOCX
    - PyPDF2 –∏–ª–∏ pdfplumber –¥–ª—è PDF
    - OCR –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ PDF

    –°–µ–π—á–∞—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    """
    filename = Path(file_path).name
    file_ext = Path(file_path).suffix.lower()

    # –ó–ê–ì–õ–£–®–ö–ê: –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –ø–∞—Ä—Å–∏–Ω–≥ —Ñ–∞–π–ª–∞
    return f"[–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ {filename} ({file_ext}) - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏]"


# ============================
# –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ï –° API
# ============================

def call_analysis_api(
    stage: str,
    req_type: str,
    tz_file_path: str,
    doc_file_path: str,
    tu_file_path: Optional[str] = None
) -> dict:
    """
    –í—ã–∑–æ–≤ API-—Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

    Args:
        stage: —Å—Ç–∞–¥–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        req_type: —Ç–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        tz_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¢–ó
        doc_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        tu_file_path: –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¢–£ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç API
    """
    try:
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
        tz_content = extract_file_content(tz_file_path)
        doc_content = extract_file_content(doc_file_path)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        payload = {
            "stage": stage,
            "req_type": req_type,
            "tz_document": {
                "filename": Path(tz_file_path).name,
                "content_summary": tz_content
            },
            "doc_document": {
                "filename": Path(doc_file_path).name,
                "content_summary": doc_content
            }
        }

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¢–£ –µ—Å–ª–∏ –µ—Å—Ç—å
        if tu_file_path:
            tu_content = extract_file_content(tu_file_path)
            payload["tu_document"] = {
                "filename": Path(tu_file_path).name,
                "content_summary": tu_content
            }

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        print(f"üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {API_SERVICE_URL}/analyze")
        response = requests.post(
            f"{API_SERVICE_URL}/analyze",
            json=payload,
            timeout=300  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        )

        response.raise_for_status()
        return response.json()

    except requests.exceptions.ConnectionError:
        return {
            "error": f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API-—Å–µ—Ä–≤–∏—Å—É –ø–æ –∞–¥—Ä–µ—Å—É {API_SERVICE_URL}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω."
        }
    except requests.exceptions.Timeout:
        return {
            "error": "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞ (5 –º–∏–Ω—É—Ç)"
        }
    except requests.exceptions.HTTPError as e:
        return {
            "error": f"–û—à–∏–±–∫–∞ HTTP –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞: {e.response.status_code} - {e.response.text}"
        }
    except Exception as e:
        return {
            "error": f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {str(e)}"
        }


# ============================
# –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
# ============================

def format_analysis_results(api_response: dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Markdown

    Args:
        api_response: –æ—Ç–≤–µ—Ç –æ—Ç API-—Å–µ—Ä–≤–∏—Å–∞

    Returns:
        str: —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown
    """
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—à–∏–±–∫—É
    if "error" in api_response:
        return f"""
## ‚ùå –û—à–∏–±–∫–∞

{api_response['error']}
"""

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    stage = api_response.get("stage", "")
    req_type = api_response.get("req_type", "")
    requirements = api_response.get("requirements", [])
    summary = api_response.get("summary", "")

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    table_rows = []
    for req in requirements:
        row = f"""| {req.get('number', '-')} | {req.get('requirement', '-')} | {req.get('status', '-')} | {req.get('confidence', 0)} | {req.get('solution_description', '-')} | {req.get('reference', '-')} | {req.get('discrepancies', '-')} | {req.get('recommendations', '-')} |"""
        table_rows.append(row)

    table = "\n".join(table_rows) if table_rows else "| - | –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã | - | - | - | - | - | - |"

    result = f"""
## ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

**–°—Ç–∞–¥–∏—è:** {STAGES.get(stage, stage)}
**–¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {REQUIREMENT_TYPES.get(req_type, req_type)}

---

### üìä –¢–∞–±–ª–∏—Ü–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π

| ‚Ññ | –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∏–∑ –¢–ó | –°—Ç–∞—Ç—É—Å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è | –î–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å (%) | –û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è | –°—Å—ã–ª–∫–∞ (–¥–æ–∫—É–º–µ–Ω—Ç, –ª–∏—Å—Ç/—Å—Ç—Ä–∞–Ω–∏—Ü–∞) | –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ | –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ |
|---|------------------|-------------------|-------------------|------------------|----------------------------------|----------------------------------------|--------------|
{table}

---

### üìù –û–±—â–∞—è —Å–≤–æ–¥–∫–∞

{summary}

---

**–í—Å–µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:** {len(requirements)}
**–ò—Å—Ç–æ—á–Ω–∏–∫:** Google Gemini API
"""

    return result


# ============================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò
# ============================

def process_documentation_analysis(
    tz_file,
    doc_file,
    stage: str,
    req_type: str,
    tu_file=None
) -> str:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

    Args:
        tz_file: —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
        doc_file: —Ñ–∞–π–ª –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        stage: —Å—Ç–∞–¥–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        req_type: —Ç–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        tu_file: —Ñ–∞–π–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —É—Å–ª–æ–≤–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)

    Returns:
        str: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Markdown –∏–ª–∏ JSON —Å –æ—à–∏–±–∫–æ–π
    """
    print(f"üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: —Å—Ç–∞–¥–∏—è={stage}, —Ç–∏–ø={req_type}")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    valid, error_msg = validate_all_inputs(tz_file, doc_file, stage, req_type, tu_file)
    if not valid:
        return f"## ‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏\n\n```json\n{error_msg}\n```"

    print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ")

    # –í—ã–∑–æ–≤ API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    print(f"üì° –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ API-—Å–µ—Ä–≤–∏—Å—É: {API_SERVICE_URL}")
    api_response = call_analysis_api(
        stage=stage,
        req_type=req_type,
        tz_file_path=tz_file.name,
        doc_file_path=doc_file.name,
        tu_file_path=tu_file.name if tu_file else None
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    result = format_analysis_results(api_response)

    print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
    return result


def update_tu_visibility(req_type: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¢–£"""
    if req_type in ["–¢–£_–†–î", "–¢–£_–ü–î"]:
        return gr.update(visible=True)
    else:
        return gr.update(visible=False)


# ============================
# GRADIO –ò–ù–¢–ï–†–§–ï–ô–°
# ============================

def create_interface():
    """–°–æ–∑–¥–∞–Ω–∏–µ Gradio –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""

    with gr.Blocks(title="–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", theme=gr.themes.Soft()) as interface:
        gr.Markdown("""
        # üìã –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é

        –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –¢–ó/–¢–£
        **–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Google Gemini API**
        """)

        with gr.Row():
            # –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
            with gr.Column(scale=1):
                gr.Markdown("### üìÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤")

                tz_file = gr.File(
                    label="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¢–ó)",
                    file_types=[".docx", ".pdf"],
                    type="filepath"
                )
                gr.Markdown("*–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: .docx, .pdf*")

                doc_file = gr.File(
                    label="–ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è",
                    file_types=[".docx", ".pdf"],
                    type="filepath"
                )
                gr.Markdown("*–ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã: .docx, .pdf*")

                tu_file = gr.File(
                    label="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è (–¢–£)",
                    file_types=[".docx", ".pdf"],
                    type="filepath",
                    visible=False
                )
                gr.Markdown("*–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –¥–ª—è —Å—Ç–∞–¥–∏–π –†–î –∏ –ü–î*")

            # –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞
            with gr.Column(scale=1):
                gr.Markdown("### ‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")

                stage = gr.Radio(
                    choices=list(STAGES.keys()),
                    label="–°—Ç–∞–¥–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏",
                    value="–§–≠",
                    info="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞–¥–∏—é —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
                )

                req_type = gr.Radio(
                    choices=list(REQUIREMENT_TYPES.keys()),
                    label="–¢–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π",
                    value="–¢–ó",
                    info="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
                )

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–ª–æ–∫
                gr.Markdown(f"""
                **‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞:**
                - **–ì–ö** - –ì—Ä–∞–¥–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è
                - **–§–≠** - –§–æ—Ä—ç—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¢–£)
                - **–≠–ü** - –≠—Å–∫–∏–∑–Ω—ã–π –ø—Ä–æ–µ–∫—Ç (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¢–£)
                - **–ü–î** - –ü—Ä–æ–µ–∫—Ç–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –¢–£)
                - **–†–î** - –†–∞–±–æ—á–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ –¢–£)

                **API —Å–µ—Ä–≤–∏—Å:** `{API_SERVICE_URL}`
                """)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        analyze_btn = gr.Button("üîç –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ Gemini API", variant="primary", size="lg")

        # –û–±–ª–∞—Å—Ç—å –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        gr.Markdown("### üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        output = gr.Markdown()

        # –°–≤—è–∑—ã–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        req_type.change(
            fn=update_tu_visibility,
            inputs=[req_type],
            outputs=[tu_file]
        )

        analyze_btn.click(
            fn=process_documentation_analysis,
            inputs=[tz_file, doc_file, stage, req_type, tu_file],
            outputs=[output]
        )

        # –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        gr.Markdown("""
        ---
        ### üìö –ü—Ä–∏–º–µ—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤

        **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:**
        - `tz_project.docx`, `tech_assignment.pdf`, `tz_rd.docx`

        **–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:**
        - `documentation_fe.pdf`, `docs_project.docx`, `fe_docs.pdf`

        **–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è:**
        - `requirements_tu.docx`, `project_tu.pdf` (—Å—É—Ñ—Ñ–∏–∫—Å `_tu`)

        *–°–ª–æ–≤–∞—Ä—å –ø—Ä–∏–º–µ—Ä–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: [naming-conventions](https://example.com/naming-conventions)*
        """)

    return interface


# ============================
# –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ============================

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ Gradio UI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...")
    print(f"üì° API —Å–µ—Ä–≤–∏—Å: {API_SERVICE_URL}")

    interface = create_interface()

    # –ó–∞–ø—É—Å–∫ –Ω–∞ –≤—Å–µ—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞—Ö (–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∏)
    interface.launch(
        server_name="0.0.0.0",
        server_port=7861,
        share=False
    )
